第七讲  数组	 打印本页
 
		
 
 引  言

 一、教学目的
 本讲介绍C语言中数组的定义和使用，其中重点介绍一维数组的定义、引用、初始化和作为函数参数时数据传递方式，此外对二维数组的定义、引用和初始化在文中也作了详细的说明。要求大家熟练掌握一维数组的使用，了解的二维数组的应用，并且理解数组元素和数组名作函数参数的不同，进而灵活运用数组作函数参数编程。

 二、知识要点
 1.一维数组的定义和引用
 （1）数组元素的类型和构造方法
 （2）一维数组的定义
 （3）一维数组元素的个数与下标
 （4）一维数组元素的引用
 （5）一维数组的存储形式
 2.一维数组的初始化
 一维数组初始化的几种形式
 3.多维数组的定义和使用
 （1）二维数组的定义和存储顺序
 （2）二维数组的引用
 （3）二维数组初始化的几种形式
 4.数组作为函数参数
 （1）数组元素作为函数参数
 （2）数组名作为函数参数

 三、边用边学

 §7.1  一维数组的定义和引用

 数组类型的所有元素都属于同一种类型，并且是按顺序存放在一个连续的存储空间中，即最低的地址存放第一个元素，最高的地址存放最后的一个元素。数组类型的优点主要有两个：一是让一组同一类型的数据共用一个变量名，而不需要为每一个数据都定义一个名字；二是由于数组的构造方法采用的是顺序存储，极大方便了对数组中元素按照同一方式进行的各种操作。此外需要说明的是数组中元素的次序是由下标来确定的，下标从0开始顺序编号。
 数组可以是一维数组、二维数组或者多维数组。

 一、一维数组的定义
 一维数组的定义形式为
  类型标识符数组名[元素个数]；
 数组的定义要注意以下几个问题：
 1.数组名的命名规则同变量名的命名，要符合C语言标识符的命名规则。
 2.数组名后面的“[ ]”是数组的标志，不能用圆括号或其它符号代替。
 3.数组元素的个数必须是一个固定的值，可以是整型常量、符号常量（第九讲中介绍）或者整型常量表达式。
 定义数组时，系统将按照数组类型和个数分配一段连续的存储空间存储数组元素。在定义数组要特别注意：绝对不能使用变量或者变量表达式来表示元素个数，大多数情况下不要省略元素个数（形参和数组初始化时除外）。
 4.数组元素的个数表示数组最多可以存放的数据。

 二、一维数组元素的引用
 数组必须先定义后使用。在数组的使用时要注意：C语言规定只能逐个引用数组元素，而不能一次引用整个数组。数组元素引用的一般形式是：
  数组名[下标]
 下标可以用整型常量、整型变量或者整型表达式，其范围从0开始，小于等于“元素个数-1”。
 由此可见，数组名后中括号内的内容在不同场合的含义是不同的：在定义时它代表数组元素的个数，其它情况则是下标（与数组名联合起来表示某一个特定的数组元素）。
 数组元素存放是按照下标的顺序按次序存放的。
 另外需要注意的是：C语言不检查数组的边界。所以当超越边界时，例如出现a[5]，系统不会提示错误，但是可能运行时导致其它变量甚至程序被破坏。
 数组元素的使用方法与同类型的变量的使用方法相同，可以参加各种运算。数组常用循环语句来处理。

 §7.2  一维数组的初始化

 数组的初始化的一般形式如下：
  类型标识符数组名[元素个数]={元素值表列}；
 有关数组的初始化的说明如下：
 1.元素值表列，可以是数组所有元素的初值，也可以是前面部分元素的初值。
 2.当对全部数组元素赋初值时，元素个数可以省略。但“[ ]”不能省。
 此时系统将根据数组初始化时大括号内值的个数，决定该数组的元素个数。但是如果提供的初值小于数组希望的元素个数时，方括号内的元素个数不能省。
 注意：数组初始化的赋值方式只能用于数组的定义，定义之后再赋值只能一个元素一个元素地赋值。

 §7.3  多维数组的定义和使用

 C语言允许使用多维数组。最简单的多维数组是二维数组。

 一、二维数组的定义
 二维数组的定义形式为
  类型标识符数组名[元素个数1][元素个数2]；
 二维数组中元素的存放顺序是按行存放的，即先按顺序存放第一行的数组元素，再放第二行的数组元素。
 多维数组的定义方式可以按照二维数组的定义：
  类型标识符n维数组名[元素个数1][元素个数2]…[元素个数n]；
 即n维数组就有n个“[元素个数]”。
 多维数组的存储顺序为：最左边的下标变化最慢，越往右变化越快，最右边的下标变化最快。例如上例中三维数组x的存储顺序为

 二、二维数组的引用
 二维数组中元素的表示形式为
  数组名[下标1][下标2]
 同一维数组一样，二维数组的下标可以是整型常量、整型变量或者整型表达式。为了便于理解二维数组下标的含义，我们可以将二维数组看作一个行列式或矩阵，则下标1用来确定元素的行号（从0开始，小于等于“元素个数1”减1），下标2用来确定元素的列号（从0开始，小于等于“元素个数2”减1）。
 n维数组中元素的表示形式为
  n维数组名[下标1][下标2]…[下标n]
 其中下标的取值范围和类型同二维数组，并且n维数组的元素同样可以赋值和出现在表达式中。

 三、二维数组的初始化
 二维数组的初始化方法有以下几种形式：
 1）按行对二维数组初始化。
 2）按照数组的存储顺序赋初值。
 3）只对部分元素赋值。
 4）如果对数组元素全部赋初值，定义数组时元素个数1（最左边的元素个数）可以省略，元素个数2不能省略。
 注意：同一维数组一样，二维数组初始化的赋值方式只能用于数组的定义，定义之后再赋值只能一个元素一个元素地赋值。

 §7.4  数组作为函数参数

 数组中的元素和数组名都可以作函数参数，但是效果是不一样的。

 一、一维数组元素作为函数参数
 一维数组中元素作为函数的实参，与同类型的简单变量作为实参一样，是单向的值传递，即数组元素的值传给形参，形参的改变不影响作为数组元素的实参。

 二、数组名作为函数参数
 数组名作为函数参数，此时形参和实参都是数组名（或者是表示地址的指针变量，见第十讲），传递的是整个数组，即形参数组和实参数组完全等同，是存放在同一空间的同一个数组。这样形参数组修改时，实参数组也同时被修改了。
 数组名作函数参数时要注意：形参中的数组要定义，并且要求与实参数组类型一致，但是形参数组的大小（即元素个数）可以小于等于实参数组的元素个数，甚至形参数组的元素个数可以省略，而由一个专门的参数传递元素个数。

 三、多维数组作为函数参数
 多维数组元素作函数参数同一维数组元素作函数参数相同，是单向的值传递。
 多维数组名作为函数参数，与一维数组名作为函数参数一样，传递的是数组的起始地址，即形参数组与实参数组的起始地址相同，此时形参数组可以小于实参数组。但在使用时注意：当多维数组名作为实参时，对应的形参数组的最左边（即第一维）元素个数1可以指定也可以省略，但是第二维以及其它高维的元素个数不能省略。
 上机练习和作业
 1.已知一个数组a[5]={1,2,3,4,5}、b[5]={11,4,2,7,9}，数组c[5]等于数组a、b对应元素之和。输出数组c中个元素的值。
 2.写一个函数void change（int array[ ],int n），可以将数组array中的n个元素逆序存放。即array[0]与a[n-1]互换，array[1]与array[n-2]互换……。
 3.求两个矩阵的乘积c。已知矩阵a、b的值：
  
 可以用数组a[2][3]、b[3][2]表示矩阵a、b，则其乘积矩阵c用数组[2][3]表示时，它的元素c[i][j]等于a[i][j]、b[j][i]的乘积。
 4.应用数组实现输入年year、月month、日date，计算该日期是这年的第几天。方法：定义二维数组days_of_month[2][12]，令该数组第一行由非闰年的12个月的天数组成，第二行由闰年12个月的天数组成，则根据年判断：闰年时i为1、非闰年时i为0，累计days_of_month[i][0]到days_of_month[i][month-1]的天数，再加上date，得到总天数。
 5.根据例7.10的算法，修改例7.8，要求按照平均成绩从高到低的顺序输出学号和平均分。提示：对平均分aver排序，当aver元素互换时，学号num元素对应互换。
 6.根据例7.9，进一步完成“学生成绩管理系统”。即输出如下菜单
    主菜单
 ================================
    1. 输入学生成绩
    2. 查询学生成绩
    3. 打印输出成绩
    0. 退出系统
 ================================
 请选择（1～0）:
 如果选择1，调用例7.9的输入函数input（）；选择2，调用void search（long num[],float aver[],int n），该函数可以根据输入的学号输出该学生的各课成绩和平均分；选择3，调用例7.9的输出函数output（）；选择0，显示“谢谢使用”；选择其它则显示“输入错误，请重新输入”。
 该程序只有当输入选择为“0”时结束，否则返回主菜单。
